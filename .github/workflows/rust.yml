name: Rust

on: [push, pull_request]

jobs:
  formatting:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
    - name: Format
      uses: actions-rs/cargo@v1
      with:
        command: fmt
        args: --all -- --check

  clippy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        target: aarch64-linux-android
    - name: Clippy
      uses: actions-rs/cargo@v1
      with:
        command: clippy
        # Use one of our supported targets to lint all crates including
        # the target-specific `ndk` in one go.
        # This assumes our host-tools (cargo-apk and dependencies)
        # also compile cleanly under this target.
        args: --all --all-targets --all-features --target aarch64-linux-android -- -Dwarnings

  build:
    strategy:
      fail-fast: false
      matrix:
        os:  [ubuntu-latest]
        rust-channel: ['stable', 'nightly']
        rust-target:
          - 'armv7-linux-androideabi'
          - 'aarch64-linux-android'
          - 'i686-linux-android'
          - 'x86_64-linux-android'
        include:
          - os: windows-latest
            rust-channel: 'stable'
            rust-target: 'aarch64-linux-android'
          - os: windows-latest
            rust-channel: 'stable'
            rust-target: 'x86_64-linux-android'

    runs-on: ${{ matrix.os }}
    name: Build apk

    steps:
    - uses: actions/checkout@v2

    - name: Installing Rust ${{ matrix.rust-channel }} w/ ${{ matrix.rust-target }}
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust-channel }}
        target: ${{ matrix.rust-target }}
        override: true

    - name: Install cargo-apk
      run:
        cargo install --path cargo-apk

    - name: Cargo check for target ${{ matrix.rust-target }}
      run: cargo check -p ndk --target ${{ matrix.rust-target }} --all-features

    - name: Cargo apk build for target ${{ matrix.rust-target }}
      run: cargo apk build -p ndk-examples --target ${{ matrix.rust-target }} --examples

    - uses: actions/upload-artifact@v2
      # Only need this for CI, unless users are interested in downloading
      # a ready-made app that does nothing but printing "hello world".
      if: ${{ matrix.rust-target == 'x86_64-linux-android' }}
      name: Upload hello_world apk
      with:
        name: hello_world_${{ matrix.os }}_${{ matrix.rust-target }}
        path: ./target/debug/apk/examples/hello_world.apk

  android_emulator:
    name: hello_world example on emulator
    needs: build
    runs-on: macos-latest
    strategy:
      matrix:
        source_os: [ubuntu-latest, windows-latest, local]
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - uses: actions/download-artifact@v2
      name: Download hello_world APK
      if: ${{ matrix.source_os != 'local' }}
      id: download
      with:
        name: hello_world_${{ matrix.source_os }}_x86_64-linux-android
    - name: Install `cargo-apk` and add `x86_64-linux-android` target
      if: ${{ matrix.source_os == 'local' }}
      run: |
        cargo install --path cargo-apk
        rustup target add x86_64-linux-android
    - name: Start hello_world example
      uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: 29
        arch: x86_64
        # the `googleapis` emulator target is considerably slower on CI.
        target: default
        profile: Nexus 5X
        script: ./.github/workflows/android_test.sh "${{ steps.download.outputs.download-path }}"
    - name: Upload emulator logs
      uses: actions/upload-artifact@v2
      if: ${{ always() }}
      with:
        name: log
        path: ~/logcat.log

  build-host:
    strategy:
      fail-fast: false
      matrix:
        os:  [ubuntu-latest]
        rust-channel: ['stable', 'nightly']

    runs-on: ${{ matrix.os }}
    name: Host-side tests

    steps:
    - uses: actions/checkout@v2

    - name: Installing Rust ${{ matrix.rust-channel }}
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust-channel }}
        override: true

    - name: Test ndk-sys
      run:
        cargo test -p ndk-sys --all-features

    - name: Test ndk
      run:
        cargo test -p ndk --all-features

    - name: Test ndk-build
      run:
        cargo test -p ndk-build --all-features

    - name: Test ndk-glue
      run:
        cargo test -p ndk-glue --all-features

    - name: Test ndk-macro
      run:
        cargo test -p ndk-macro --all-features

    - name: Test cargo-apk
      run:
        cargo test -p cargo-apk --all-features

  docs:
    strategy:
      fail-fast: false
      matrix:
        os:  [ubuntu-latest]
        rust-channel: ['stable', 'nightly']

    runs-on: ${{ matrix.os }}
    name: Build-test docs

    steps:
    - uses: actions/checkout@v2

    - name: Installing Rust ${{ matrix.rust-channel }}
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust-channel }}
        override: true

    - name: Document all crates
      env:
        RUSTDOCFLAGS: -Dwarnings
      run:
        cargo doc --all --all-features
